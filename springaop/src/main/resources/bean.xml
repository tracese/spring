<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!--把代理对象交给Spring容器来管理-->
    <bean id="accountService" class="com.example.service.impl.AccountServiceImpl"/>
    <!--把通知/增强Bean交给Spring容器来管理-->
    <bean id="logger" class="com.example.util.Logger"/>
    <!--使用aop:config标签表明开始aop的配置-->
    <aop:config>
        <!--使用aop:aspect标签表明配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知类型  通知类中的方法 切入点表达式 全通配写法* *..*.*(..) 正常写法：* com.example.trace.service.impl.*.*(..)-->
            <!--前置通知，在切入点方法执行之前执行-->
            <aop:before method="printLog" pointcut="execution( * com.example.service.impl.*.*(..))"/>
            <!--后置通知，在切入点方法正常执行之后执行-->
            <aop:after-returning method="printLog" pointcut="execution(* com.example.service.impl.*.*(..))"/>
            <!--异常通知，在切入点方法执行产生异常之后执行-->
            <aop:after-throwing method="printLog" pointcut="execution(* com.example.service.impl.*.*(..))"/>
            <!--最終通知，無論切入點方法是否正常执行都会执行-->
            <aop:after method="printLog" pointcut="execution(* com.example.service.impl.*.*(..))"/>
        </aop:aspect>
    </aop:config>
    <!--
    1、访问控制修饰符可以省略，包名可以使用通配符，表示任意包，但是有几级包就需要写多少个*.，可以使用..表示当前包及其子包，类名和方法名也可以使用通配符
    2、方法参数列表，可以直接写数据类型，基本类型直接写，引用类型写包名.类名方式，写通配符，表示任意类型，但必须有参数，..有无参数都可以，有参数可以是任意类型
    -->

</beans>